#ifndef MediaInfoDLLH
#define MediaInfoDLLH

#undef  __T
#define __T(__x)    __T(__x)
#if defined(UNICODE) || defined(_UNICODE)
    typedef wchar_t MediaInfo_Char;
    #undef  __T
    #define __T(__x) L ## __x
    #define MEDIAINFO_Ansi ""
#else
    typedef char MediaInfo_Char;
    #undef  __T
    #define __T(__x) __x
    #define MEDIAINFO_Ansi "A"
#endif

#include <cstdlib>

typedef unsigned char MediaInfo_int8u;
typedef unsigned long long MediaInfo_int64u;

typedef enum MediaInfo_stream_t {
    MediaInfo_Stream_General,
    MediaInfo_Stream_Video,
    MediaInfo_Stream_Audio,
    MediaInfo_Stream_Text,
    MediaInfo_Stream_Other,
    MediaInfo_Stream_Image,
    MediaInfo_Stream_Menu,
    MediaInfo_Stream_Max
} MediaInfo_stream_C;

typedef enum MediaInfo_info_t {
    MediaInfo_Info_Name,
    MediaInfo_Info_Text,
    MediaInfo_Info_Measure,
    MediaInfo_Info_Options,
    MediaInfo_Info_Name_Text,
    MediaInfo_Info_Measure_Text,
    MediaInfo_Info_Info,
    MediaInfo_Info_HowTo,
    MediaInfo_Info_Max
} MediaInfo_info_C;

typedef enum MediaInfo_infooptions_t {
    MediaInfo_InfoOption_ShowInInform,
    MediaInfo_InfoOption_Reserved,
    MediaInfo_InfoOption_ShowInSupported,
    MediaInfo_InfoOption_TypeOfValue,
    MediaInfo_InfoOption_Max
} MediaInfo_infooptions_C;

typedef enum MediaInfo_fileoptions_t {
    MediaInfo_FileOption_Nothing     = 0x00,
    MediaInfo_FileOption_NoRecursive = 0x01,
    MediaInfo_FileOption_CloseAll    = 0x02,
    MediaInfo_FileOption_Max         = 0x04
} MediaInfo_fileoptions_C;

#define __stdcall

#ifdef __cplusplus
extern "C"
{
#endif

    typedef void* (__stdcall *MEDIAINFO_New)();
    static MEDIAINFO_New MediaInfo_New;
    typedef void* (__stdcall *MEDIAINFOLIST_New)();
    static MEDIAINFOLIST_New MediaInfoList_New;
    typedef void (__stdcall *MEDIAINFO_Delete)(void*);
    static MEDIAINFO_Delete MediaInfo_Delete;
    typedef void (__stdcall *MEDIAINFOLIST_Delete)(void*);
    static MEDIAINFOLIST_Delete MediaInfoList_Delete;
    typedef size_t (__stdcall *MEDIAINFO_Open)(void*, const MediaInfo_Char*);
    static MEDIAINFO_Open MediaInfo_Open;
    typedef size_t (__stdcall *MEDIAINFOLIST_Open)(void*, const MediaInfo_Char*, const MediaInfo_fileoptions_C);
    static MEDIAINFOLIST_Open MediaInfoList_Open;
    typedef size_t (__stdcall *MEDIAINFO_Open_Buffer_Init)(void*, MediaInfo_int64u File_Size, MediaInfo_int64u File_Offset);
    static MEDIAINFO_Open_Buffer_Init MediaInfo_Open_Buffer_Init;
    typedef size_t (__stdcall *MEDIAINFO_Open_Buffer_Continue)(void*, MediaInfo_int8u* Buffer, size_t Buffer_Size);
    static MEDIAINFO_Open_Buffer_Continue MediaInfo_Open_Buffer_Continue;
    typedef MediaInfo_int64u(__stdcall *MEDIAINFO_Open_Buffer_Continue_GoTo_Get)(void*);
    static MEDIAINFO_Open_Buffer_Continue_GoTo_Get MediaInfo_Open_Buffer_Continue_GoTo_Get;
    typedef size_t (__stdcall *MEDIAINFO_Open_Buffer_Finalize)(void*);
    static MEDIAINFO_Open_Buffer_Finalize MediaInfo_Open_Buffer_Finalize;
    typedef size_t (__stdcall *MEDIAINFO_Open_NextPacket)(void*);
    static MEDIAINFO_Open_NextPacket MediaInfo_Open_NextPacket;
    typedef void (__stdcall *MEDIAINFO_Close)(void*);
    static MEDIAINFO_Close MediaInfo_Close;
    typedef void (__stdcall *MEDIAINFOLIST_Close)(void*, size_t);
    static MEDIAINFOLIST_Close MediaInfoList_Close;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFO_Inform)(void*, size_t Reserved);
    static MEDIAINFO_Inform MediaInfo_Inform;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFOLIST_Inform)(void*, size_t, size_t Reserved);
    static MEDIAINFOLIST_Inform MediaInfoList_Inform;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFO_GetI)(void*, MediaInfo_stream_C StreamKind, size_t StreamNumber, size_t Parameter, MediaInfo_info_C KindOfInfo);
    static MEDIAINFO_GetI MediaInfo_GetI;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFOLIST_GetI)(void*, size_t, MediaInfo_stream_C StreamKind, size_t StreamNumber, size_t Parameter, MediaInfo_info_C KindOfInfo);
    static MEDIAINFOLIST_GetI MediaInfoList_GetI;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFO_Get)(void*, MediaInfo_stream_C StreamKind, size_t StreamNumber, const MediaInfo_Char* Parameter, MediaInfo_info_C KindOfInfo, MediaInfo_info_C KindOfSearch);
    static MEDIAINFO_Get MediaInfo_Get;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFOLIST_Get)(void*, size_t, MediaInfo_stream_C StreamKind, size_t StreamNumber, const MediaInfo_Char* Parameter, MediaInfo_info_C KindOfInfo, MediaInfo_info_C KindOfSearch);
    static MEDIAINFOLIST_Get MediaInfoList_Get;
    typedef size_t (__stdcall *MEDIAINFO_Output_Buffer_Get)(void*, const MediaInfo_Char* Parameter);
    static MEDIAINFO_Output_Buffer_Get MediaInfo_Output_Buffer_Get;
    typedef size_t (__stdcall *MEDIAINFO_Output_Buffer_GetI)(void*, size_t Pos);
    static MEDIAINFO_Output_Buffer_GetI MediaInfo_Output_Buffer_GetI;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFO_Option)(void*, const MediaInfo_Char* Parameter, const MediaInfo_Char* Value);
    static MEDIAINFO_Option MediaInfo_Option;
    typedef const MediaInfo_Char* (__stdcall *MEDIAINFOLIST_Option)(void*, const MediaInfo_Char* Parameter, const MediaInfo_Char* Value);
    static MEDIAINFOLIST_Option MediaInfoList_Option;
    typedef size_t (__stdcall *MEDIAINFO_State_Get)(void*);
    static MEDIAINFO_State_Get MediaInfo_State_Get;
    typedef size_t (__stdcall *MEDIAINFOLIST_State_Get)(void*);
    static MEDIAINFOLIST_State_Get MediaInfoList_State_Get;
    typedef size_t (__stdcall *MEDIAINFO_Count_Get)(void*, MediaInfo_stream_C StreamKind, size_t StreamNumber);
    static MEDIAINFO_Count_Get MediaInfo_Count_Get;
    typedef size_t (__stdcall *MEDIAINFOLIST_Count_Get)(void*, size_t, MediaInfo_stream_C StreamKind, size_t StreamNumber);
    static MEDIAINFOLIST_Count_Get MediaInfoList_Count_Get;
    typedef size_t (__stdcall *MEDIAINFO_Count_Get_Files)(void*);
    static MEDIAINFO_Count_Get_Files MediaInfo_Count_Get_Files;
    typedef size_t (__stdcall *MEDIAINFOLIST_Count_Get_Files)(void*);
    static MEDIAINFOLIST_Count_Get_Files MediaInfoList_Count_Get_Files;

#ifdef __cplusplus
}
#endif /*__cplusplus*/

/***************************************************************************/
/***************************************************************************/
/***************************************************************************/

#ifdef __cplusplus

#include <string>
#include <sstream>


namespace MediaInfoDLL
{

#undef  __T
#define __T(__x)    __T(__x)
#if defined(UNICODE) || defined(_UNICODE)
    typedef wchar_t Char;
    #undef  __T
    #define __T(__x) L ## __x
#else
    typedef char Char;
    #undef  __T
    #define __T(__x) __x
#endif
    typedef std::basic_string<Char>        String;
    typedef std::basic_stringstream<Char>  StringStream;
    typedef std::basic_istringstream<Char> iStringStream;
    typedef std::basic_ostringstream<Char> oStringStream;
    typedef std::basic_istringstream<Char> tiStringStream; // Legacy
    typedef std::basic_ostringstream<Char> toStringStream; //Legacy
    const size_t Error = (size_t)(-1);

    enum stream_t {
        Stream_General,
        Stream_Video,
        Stream_Audio,
        Stream_Text,
        Stream_Other,
        Stream_Image,
        Stream_Menu,
        Stream_Max
    };

    enum info_t {
        Info_Name,
        Info_Text,
        Info_Measure,
        Info_Options,
        Info_Name_Text,
        Info_Measure_Text,
        Info_Info,
        Info_HowTo,
        Info_Max
    };

    enum infooptions_t {
        InfoOption_ShowInInform,
        InfoOption_Reserved,
        InfoOption_ShowInSupported,
        InfoOption_TypeOfValue,
        InfoOption_Max
    };

    enum fileoptions_t {
        FileOption_Nothing      = 0x00,
        FileOption_NoRecursive  = 0x01,
        FileOption_CloseAll     = 0x02,
        FileOption_Max          = 0x04
    };

    class MediaInfo
    {
    public :
        MediaInfo()        {Handle = MediaInfo_New();};
        ~MediaInfo()       {MediaInfo_Delete(Handle);};

        size_t Open(const String &File) {return MediaInfo_Open(Handle, File.c_str());};
        size_t Open_Buffer_Init(MediaInfo_int64u File_Size = (MediaInfo_int64u) - 1, MediaInfo_int64u File_Offset = 0) {return MediaInfo_Open_Buffer_Init(Handle, File_Size, File_Offset);};
        size_t Open_Buffer_Continue(MediaInfo_int8u* Buffer, size_t Buffer_Size) {return MediaInfo_Open_Buffer_Continue(Handle, Buffer, Buffer_Size);};
        MediaInfo_int64u Open_Buffer_Continue_GoTo_Get() {return MediaInfo_Open_Buffer_Continue_GoTo_Get(Handle);};
        size_t Open_Buffer_Finalize() {return MediaInfo_Open_Buffer_Finalize(Handle);};
        size_t Open_NextPacket() {return MediaInfo_Open_NextPacket(Handle);};
        //size_t Save () {MEDIAINFO_TEST_INT; return MediaInfo_Save(Handle);};
        void Close() {return MediaInfo_Close(Handle);};

        //General information
        String Inform()  {return MediaInfo_Inform(Handle, 0);};
        String Get(stream_t StreamKind, size_t StreamNumber, size_t Parameter, info_t InfoKind = Info_Text)  {return MediaInfo_GetI(Handle, (MediaInfo_stream_C)StreamKind, StreamNumber, Parameter, (MediaInfo_info_C)InfoKind);};
        String Get(stream_t StreamKind, size_t StreamNumber, 
            const String &Parameter, info_t InfoKind = Info_Text, 
            info_t SearchKind = Info_Name)  {
            return MediaInfo_Get(Handle, (MediaInfo_stream_C)StreamKind, StreamNumber, Parameter.c_str(), (MediaInfo_info_C)InfoKind, (MediaInfo_info_C)SearchKind);
        };
        //size_t Set (const String &ToSet, stream_t StreamKind, size_t StreamNumber, size_t Parameter, const String &OldValue=__T(""))  {MEDIAINFO_TEST_INT; return MediaInfo_SetI (Handle, ToSet.c_str(), (MediaInfo_stream_C)StreamKind, StreamNumber, Parameter, OldValue.c_str());};
        //size_t Set (const String &ToSet, stream_t StreamKind, size_t StreamNumber, const String &Parameter, const String &OldValue=__T(""))  {MEDIAINFO_TEST_INT; return MediaInfo_Set (Handle, ToSet.c_str(), (MediaInfo_stream_C)StreamKind, StreamNumber, Parameter.c_str(), OldValue.c_str());};
        size_t Output_Buffer_Get(const String &Value) {return MediaInfo_Output_Buffer_Get(Handle, Value.c_str());}
        size_t Output_Buffer_Get(size_t Pos) {return MediaInfo_Output_Buffer_GetI(Handle, Pos);}
        String        Option(const String &Option, const String &Value = __T(""))  {return MediaInfo_Option(Handle, Option.c_str(), Value.c_str());};
        static String Option_Static(const String &Option, const String &Value = __T(""))  {return MediaInfo_Option(NULL, Option.c_str(), Value.c_str());};
        size_t        State_Get() {return MediaInfo_State_Get(Handle);};
        size_t        Count_Get(stream_t StreamKind, size_t StreamNumber = (size_t) - 1)  {return MediaInfo_Count_Get(Handle, (MediaInfo_stream_C)StreamKind, StreamNumber);};

        // bool IsReady() {
        //                return (Handle && MediaInfo_Module) ? true : false;
        // }

    private :
        void* Handle;
    };

} //NameSpace
#endif /*__cplusplus*/

#endif
